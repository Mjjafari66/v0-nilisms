name: Build and deploy to GitHub Pages

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Enable pnpm via Corepack
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install

      - name: Create .env.production from repo secrets
        run: |
          cat > .env.production <<'EOF'
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          EOF

      - name: Build
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Ensure export output (try multiple fallbacks)
        run: |
          set -euo pipefail
          rm -rf out || true
          # Preferred: modern Next export location
          if [ -d ".next/output/export" ] && [ -n "$(ls -A .next/output/export 2>/dev/null)" ]; then
            echo "Using .next/output/export"
            cp -R .next/output/export out
            exit 0
          fi

          # Fallback: older next export directory
          if [ -d ".next/export" ] && [ -n "$(ls -A .next/export 2>/dev/null)" ]; then
            echo "Using .next/export"
            cp -R .next/export out
            exit 0
          fi

          # Fallback: assemble a basic static site from prerendered server/pages and static assets
          echo "Attempting to assemble out/ from .next prerendered files"
          mkdir -p out

          # copy static _next assets
          if [ -d ".next/static" ]; then
            mkdir -p out/_next
            cp -R .next/static out/_next/static || true
          fi

          # copy prerendered pages (if any) from server/pages
          if [ -d ".next/server/pages" ]; then
            for f in .next/server/pages/*.html; do
              [ -f "$f" ] || continue
              dest="out/$(basename "$f")"
              cp "$f" "$dest"
            done
          fi

          # copy any app exported htmls if present
          if [ -d ".next/server/app" ]; then
            find .next/server/app -name '*.html' -exec bash -c 'for p; do dest="out/${p#.next/server/app/}"; mkdir -p "$(dirname "$dest")"; cp "$p" "$dest"; done' bash {} + || true
          fi

          # Basic check: ensure out is not empty
          if [ -z "$(ls -A out 2>/dev/null)" ]; then
            echo "ERROR: could not assemble ./out from build artifacts. Build did not produce an export." >&2
            ls -la .next || true
            exit 1
          fi
      - name: Configure git for deploy
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: ./out
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}


